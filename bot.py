from dotenv import load_dotenv
import logging
import os
import requests
import sys
import easyocr
import numpy as np
from PIL import Image
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from io import BytesIO
import re

# Carregar as vari√°veis de ambiente do arquivo .env
load_dotenv()

# Substitua pelo seu token real
BOT_TOKEN = os.getenv('BOT_TOKEN')
URL_TELEGRAM_GETME = os.getenv('URL_TELEGRAM_GETME')
CAMINHO_TESSERACT = os.getenv('CAMINHO_TESSERACT')

if not BOT_TOKEN:
    raise ValueError("A vari√°vel de ambiente BOT_TOKEN n√£o est√° definida!")

# URL para validar o token
URL = f"{URL_TELEGRAM_GETME}{BOT_TOKEN}/getMe"

# Fun√ß√£o para validar o token
def validar_token():
    try:
        response = requests.get(URL)
        data = response.json()

        if data.get("ok"):
            print("‚úÖ Token v√°lido! Bot iniciado...")
        else:
            print("‚ùå Token inv√°lido! Verifique o seu token e tente novamente.")
            sys.exit(1)  # Encerra o programa com erro
    except requests.RequestException as e:
        print(f"‚ùå Erro ao validar o token: {e}")
        sys.exit(1)

# Fun√ß√£o para verificar se o caminho do Tesseract est√° correto
def verificar_tesseract():
    try:
        # Teste se o Tesseract est√° funcionando corretamente
        pytesseract.pytesseract.tesseract_cmd = CAMINHO_TESSERACT # Atualize para o caminho correto
        test_text = pytesseract.image_to_string('photo_teste.jpg')  # Usando uma imagem de teste
        print("‚úÖ Tesseract est√° funcionando corretamente.")
    except pytesseract.pytesseract.TesseractNotFoundError:
        print("‚ùå Erro: Tesseract n√£o encontrado. Verifique a instala√ß√£o e o caminho.")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erro ao executar o Tesseract: {e}")
        sys.exit(1)

# Fun√ß√£o para ler o texto do comprovante (imagem) usando o EasyOCR
def ler_comprovante_easyocr(image_data):
    """Usa o EasyOCR para ler texto de uma imagem e retorna um resumo filtrado."""
    # Converter os dados de imagem em um formato que o EasyOCR entenda
    image = Image.open(BytesIO(image_data))
    image_np = np.array(image)  # Converte para numpy array
    
    # Inicializa o leitor EasyOCR
    reader = easyocr.Reader(['pt', 'en'])  # Suporta v√°rios idiomas
    result = reader.readtext(image_np)

    # Extrai o texto detectado
    texto = " ".join([res[1] for res in result])

    # Filtra os dados relevantes com base em palavras-chave e regex
    dados_resumo = filtrar_dados(texto)
    
    return dados_resumo

def filtrar_dados(texto):
    """Filtra os dados de favorecido, pagador e vencimento do texto extra√≠do."""
    dados = {
        "favorecido": None,
        "pagador": None,
        "vencimento": None
    }
    
    # Regex para identificar o favorecido, pagador e vencimento
    favorecido_regex = r"Favorecido\s*[:\-]?\s*([a-zA-Z\s]+)"
    pagador_regex = r"Pagador\s*[:\-]?\s*([a-zA-Z\s]+)"
    vencimento_regex = r"Vencimento\s*[:\-]?\s*(\d{2}/\d{2}/\d{4})"
    
    # Buscando os dados com regex
    favorecido = re.search(favorecido_regex, texto, re.IGNORECASE)
    if favorecido:
        dados["favorecido"] = favorecido.group(1).strip()
    
    pagador = re.search(pagador_regex, texto, re.IGNORECASE)
    if pagador:
        dados["pagador"] = pagador.group(1).strip()
    
    vencimento = re.search(vencimento_regex, texto, re.IGNORECASE)
    if vencimento:
        dados["vencimento"] = vencimento.group(1).strip()
    
    # Montando o resumo
    resumo = "\n".join([f"{key.capitalize()}: {value}" for key, value in dados.items() if value])
    
    return resumo

# Fun√ß√£o para tratar o comando /start
async def start(update: Update, context: CallbackContext) -> None:
    """Envia a mensagem de boas-vindas e exibe o menu."""
    keyboard = [["1. Enviar comprovante para imobili√°ria"], ["2. Sugest√µes"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "Ol√°! Eu sou o Seu Creysson. Fui criado pra te ajudar a enviar o comprovante da imobili√°ria no dia certo, J√Å QUE TU ESQUECE."
    )
    await update.message.reply_text("Selecione o que deseja fazer agora:", reply_markup=reply_markup)

# Fun√ß√£o para lidar com as respostas do menu
async def handle_response(update: Update, context: CallbackContext) -> None:
    """Responde com base na op√ß√£o escolhida."""
    user_choice = update.message.text

    if "1. Enviar comprovante" in user_choice:
        await update.message.reply_text("√ìtimo! Envie o comprovante como um arquivo ou foto.")
    elif "2. Sugest√µes" in user_choice:
        await update.message.reply_text("Manda a√≠ sua sugest√£o que eu repasso pro pessoal!")
    else:
        await update.message.reply_text("N√£o entendi... escolha uma das op√ß√µes do menu.")

# Fun√ß√£o para processar o arquivo de imagem
async def processar_comprovante(update: Update, context: CallbackContext) -> None:
    """Processa a imagem enviada pelo usu√°rio e extrai o texto do comprovante."""
    if update.message.photo:
        file = await update.message.photo[-1].get_file()
        image_data = await file.download_as_bytearray()

        dados_resumo = ler_comprovante_easyocr(image_data)  # Usando EasyOCR aqui

        if not dados_resumo:
            await update.message.reply_text("N√£o consegui ler ou filtrar as informa√ß√µes da imagem. Tente enviar uma imagem mais leg√≠vel.")
        else:
            # Envia o resumo para o usu√°rio
            await update.message.reply_text(
                f"Eu encontrei as seguintes informa√ß√µes no comprovante:\n\n{dados_resumo}"
                "\n\nEst√° correto? Responda 'Sim' ou 'N√£o'."
            )
    else:
        await update.message.reply_text("Por favor, envie um arquivo ou imagem com o comprovante.")

# Fun√ß√£o que confirma os dados
async def confirmar_comprovante(update: Update, context: CallbackContext) -> None:
    """Confirma os dados do comprovante."""
    texto = update.message.text.strip().lower()
    
    if texto == "sim":
        await update.message.reply_text("Comprovante confirmado! Enviado para a imobili√°ria.")
    elif texto == "n√£o":
        await update.message.reply_text("Ok, por favor, envie novamente o comprovante.")
    else:
        await update.message.reply_text("N√£o entendi sua resposta. Por favor, responda 'Sim' ou 'N√£o'.")

# Configura√ß√£o do bot
def main():
    """Inicializa e executa o bot."""
    validar_token()  # Valida o token antes de continuar
    #verificar_tesseract()  # Verifica se o Tesseract est√° configurado corretamente

    app = Application.builder().token(BOT_TOKEN).build()

    # Handlers (comandos e mensagens)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_response))
    app.add_handler(MessageHandler(filters.PHOTO, processar_comprovante))
    app.add_handler(MessageHandler(filters.TEXT, confirmar_comprovante))

    print("ü§ñ Bot rodando...")
    app.run_polling()

# Executa o bot
if __name__ == "__main__":
    main()
